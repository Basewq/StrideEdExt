namespace StrideEdExt.Rendering
{
    // The shader that outputs the supplied ObjectInfoData (ModelComponentId, MeshIndexAndMaterialIndex) on a texture.
    shader ObjectInfoOutputShader : PositionStream4, Transformation, ShaderBase
    {
        // Inheriting PositionStream4 gives streams.Position, Transformation gives WorldViewProjection.

        // We want to output (uint) data to the output render target texture, so this is defined
        // as R32_UInt (see ObjectInfoSceneRenderer where the output texture is defined).
        // Stride's ShaderBase defines SV_Target0 as float4 but we can work around this by
        // bit casting the uint to float (asfloat) so that the texture outputs the correct value.

        // This is the same structure as the C# struct ObjectInfoData
        // Because this appears as a shader key, be sure to make the namespace declaration
        // the SAME as the C#'s version, otherwise it won't reference that one properly
        // in the generated shader key file.
        struct ObjectInfoData
        {
            uint RenderGroup;
        };

        cbuffer PerDraw
        {
            stage ObjectInfoData ObjectInfo;
        }

        // Note that we do not need to override VSMain. Due to inheriting ShaderBase and the use of effect mixins,
        // VSMain will be handled by one of the shader. This is necessary for handling skinned (animated) models.

        stage override void PSMain()
        {
            // The render target is actually R32G32_UInt so just bit cast the uint values
            float renderGroupId = asfloat(ObjectInfo.RenderGroup);
            streams.ColorTarget = float4(renderGroupId, 0, 0, 0);
        }
    };
}
