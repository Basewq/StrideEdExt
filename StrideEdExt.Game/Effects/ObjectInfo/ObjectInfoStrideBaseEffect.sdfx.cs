// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Stride Shader Mixin Code Generator.
// To generate it yourself, please install Stride.VisualStudio.Package .vsix
// and re-save the associated .sdfx.
// </auto-generated>

using System;
using Stride.Core;
using Stride.Rendering;
using Stride.Graphics;
using Stride.Shaders;
using Stride.Core.Mathematics;
using Buffer = Stride.Graphics.Buffer;

using Stride.Rendering.Data;
using Stride.Rendering.Materials;
namespace StrideEdExt.Rendering
{
    internal static partial class ShaderMixins
    {
        internal partial class ObjectInfoStrideBaseEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "ShaderBase");
                context.Mixin(mixin, "TransformationBase");
                context.Mixin(mixin, "NormalStream");
                var extensionTessellationShader = context.GetParam(MaterialKeys.TessellationShader);
                if (context.GetParam(StrideEffectBaseKeys.HasInstancing))
                {
                    mixin.AddMacro("ModelTransformUsage", context.GetParam(StrideEffectBaseKeys.ModelTransformUsage));
                    context.Mixin(mixin, "TransformationWAndVPInstanced");
                }
                else
                {
                    context.Mixin(mixin, "TransformationWAndVP");
                }
                if (context.GetParam(MaterialKeys.HasSkinningPosition))
                {
                    mixin.AddMacro("SkinningMaxBones", context.GetParam(MaterialKeys.SkinningMaxBones));
                    if (context.GetParam(StrideEffectBaseKeys.HasInstancing))
                    {
                        context.Mixin(mixin, "TransformationSkinningInstanced");
                    }
                    else
                    {
                        context.Mixin(mixin, "TransformationSkinning");
                    }
                    if (context.GetParam(MaterialKeys.HasSkinningNormal))
                    {
                        context.Mixin(mixin, "NormalMeshSkinning");
                    }
                    if (context.GetParam(MaterialKeys.HasSkinningTangent))
                    {
                        context.Mixin(mixin, "TangentMeshSkinning");
                    }
                }
            }

            [System.Runtime.CompilerServices.ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("ObjectInfoStrideBaseEffect", new ObjectInfoStrideBaseEffect());
            }
        }
    }
}
